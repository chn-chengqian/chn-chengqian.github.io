<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>心梦无痕</title>
  <subtitle>chn-chengqian</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-10-31T07:31:48.161Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>程前</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java 知识点总结</title>
    <link href="http://yoursite.com/2016/10/31/JavaSE%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/10/31/JavaSE 知识点总结/</id>
    <published>2016-10-31T00:56:08.910Z</published>
    <updated>2016-10-31T07:31:48.161Z</updated>
    
    <content type="html"><![CDATA[<p>跟任何编程语言一样，Java 语言拥有自己的结构、语法规则和编程范例。Java 语言的编程范例基于面向对象编程 (OOP) 的概念。Java 语言是 C 语言的一种衍生语言，所以它的语法规则与 C 语言的语法规则非常相似。例如，方法使代码模块化并使用花括号（{ 和 }）分隔，变量需要在使用之前声明。在结构上，Java 语言以包 作为开头。包是 Java 语言的命名空间机制。包中包含类，而类中包含方法、变量、常量等。<br><a id="more"></a></p>
<h2 id="Java-语言概述"><a href="#Java-语言概述" class="headerlink" title="Java 语言概述"></a>Java 语言概述</h2><h3 id="Java-语言的特性"><a href="#Java-语言的特性" class="headerlink" title="Java 语言的特性"></a>Java 语言的特性</h3><ul>
<li>面向对象性</li>
<li>健壮性</li>
<li>跨平台性</li>
<li>自动垃圾回收机制</li>
</ul>
<h3 id="安装-JDK-配置环境变量"><a href="#安装-JDK-配置环境变量" class="headerlink" title="安装 JDK 配置环境变量"></a>安装 JDK 配置环境变量</h3><p>PATH 是操作系统用于查找来自命令行或终端窗口的必需可执行文件的系统变量<br>PATH 系统变量可使用控制面板中的“系统”实用程序设置（在 Windows 上），或在 shell 的启动文件内设置（在 Linux 和 Solaris 上）<br>运行 Windows 或 Mac OS X 的计算机通常不需要更改系统 PATH 变量</p>
<h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><ol>
<li>在桌面上右键单击计算机图标</li>
<li>从上下文菜单中选择属性</li>
<li>单击高级系统设置链接</li>
<li>单击环境变量。在系统变量中，设置3项属性，JAVA_HOME, PATH, CLASSPATH(不区分大小写),若已存在则点击编辑，不存在则点击新建</li>
<li>JAVA_HOME 指明 JDK 安装路径，就是刚才安装时所选择的路径（例 D:/java/jdk1.8.0_101），此路径下包括 lib，bin，jre 等文件夹（此变量最好设置，因为以后运行 tomcat，eclipse 等都需要依赖此变量）</li>
<li>Path使得系统可以在任何路径下识别java命令，设为 %JAVA_HOME%/bin;%JAVA_HOME%/jre/bin</li>
<li>CLASSPATH 为 java 加载类(class or lib)路径，只有类在 CLASSPATH 中，java命令才能识别，设为 .;%JAVA_HOME%/lib/dt.jar;%JAVA_HOME%/lib/tools.jar (要加 . 表示当前路径)</li>
<li>再次打开命令提示符窗口，输入 java -version, java, javac 出现结果证明配置成功 </li>
</ol>
<h4 id="Mac-OS-X"><a href="#Mac-OS-X" class="headerlink" title="Mac OS X"></a>Mac OS X</h4><ul>
<li>要运行不同版本的 Java，请指定完整路径，或者使用 java_home 工具：<ul>
<li>% /usr/libexec/java_home -v 1.8.0_73 –exec javac -version</li>
</ul>
</li>
</ul>
<h3 id="Java-中-JDK-JRE-和-JVM-之间的关系"><a href="#Java-中-JDK-JRE-和-JVM-之间的关系" class="headerlink" title="Java 中 JDK, JRE 和 JVM 之间的关系"></a>Java 中 JDK, JRE 和 JVM 之间的关系</h3><p><img src="http://i.imgur.com/eilgeWO.png" alt=""></p>
<h4 id="Java-开发工具包（JDK）"><a href="#Java-开发工具包（JDK）" class="headerlink" title="Java 开发工具包（JDK）"></a>Java 开发工具包（JDK）</h4><p>Java 开发工具包是 Java 环境的核心组件，并提供编译、调试和运行一个 Java 程序所需的所有工具，可执行文件和二进制文件。JDK 是一个平台特定的软件，有针对 Windows，Mac 和 Unix 系统的不同的安装包。</p>
<h4 id="Java-虚拟机（JVM）"><a href="#Java-虚拟机（JVM）" class="headerlink" title="Java 虚拟机（JVM）"></a>Java 虚拟机（JVM）</h4><p>JVM 是 Java 编程语言的核心。当我们运行一个程序时，JVM 负责将字节码转换为特定机器代码。JVM 也是平台特定的，并提供核心的 Java 方法，例如内存管理、垃圾回收和安全机制等。JVM 是可定制化的，我们可以通过 Java 选项(java options)定制它，比如配置 JVM 内存的上下界。JVM 之所以被称为虚拟是因为它提供了一个不依赖于底层操作系统和机器硬件的接口。这种独立于硬件和操作系统的特性正是 Java 程序可以一次编写多处执行的原因。</p>
<h4 id="Java-运行时环境（JRE）"><a href="#Java-运行时环境（JRE）" class="headerlink" title="Java 运行时环境（JRE）"></a>Java 运行时环境（JRE）</h4><p>JRE 是 JVM 的实施实现，它提供了运行 Java 程序的平台。JRE 包含了 JVM、Java 二进制文件和其它成功执行程序的类文件。JRE 不包含任何像 Java 编译器、调试器之类的开发工具。如果你只是想要执行 Java 程序，你只需安装 JRE 即可，没有安装 JDK 的必要。</p>
<h4 id="JDK-JRE-和-JVM-之间的区别"><a href="#JDK-JRE-和-JVM-之间的区别" class="headerlink" title="JDK, JRE 和 JVM 之间的区别"></a>JDK, JRE 和 JVM 之间的区别</h4><ul>
<li>JDK 是用于开发的而 JRE 是用于运行 Java 程序的。</li>
<li>JDK 和 JRE 都包含了 JVM，从而使得我们可以运行 Java 程序。</li>
<li>JVM 是 Java 编程语言的核心并且具有平台独立性。</li>
</ul>
<h4 id="即时编译器-JIT"><a href="#即时编译器-JIT" class="headerlink" title="即时编译器(JIT)"></a>即时编译器(JIT)</h4><p>JIT 是 JVM 的一部分，通常通过 javac 将程序源代码编译，转换成 java 字节码，JVM 通过解释字节码将其翻译成对应的机器指令，逐条读入，逐条解释翻译。很显然，经过解释执行，其执行速度必然会比可执行的二进制字节码程序慢很多。为了提高执行速度，引入了 JIT 技术。</p>
<h3 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h3><p>Java 平台不会强制时刻关注内存分配（或使用第三方库来完成此工作），它提供了开箱即用的内存管理功能。当 Java 应用程序在运行时创建一个对象实例，JVM 会自动从堆中为该对象分配内存空间，堆是一个专门留给程序使用的内存池。Java 垃圾收集器在后台运行，跟踪记录应用程序不再需要哪些对象并从它们回收内存。这种内存处理方法称为隐式内存管理，因为它不需要编写任何内存处理代码。垃圾收集是 Java 平台性能的基本特征之一。</p>
<h3 id="关键字、保留字和标识符"><a href="#关键字、保留字和标识符" class="headerlink" title="关键字、保留字和标识符"></a>关键字、保留字和标识符</h3><p>关键字是被 Java 语言赋予了特殊含义，用做专门用途的字符串（单词）。保留字也是被 Java 语言赋予了特殊含义但是没有实际应用（不能使用）。凡是自己可以起名字的地方都叫标识符。<br><img src="http://i.imgur.com/1f3uuYN.png" alt=""><br><img src="http://i.imgur.com/SQzzZa0.png" alt=""></p>
<h3 id="命名规则（一定要遵守，不遵守就会报编译的错误）"><a href="#命名规则（一定要遵守，不遵守就会报编译的错误）" class="headerlink" title="命名规则（一定要遵守，不遵守就会报编译的错误）"></a>命名规则（一定要遵守，不遵守就会报编译的错误）</h3><ul>
<li>由26个英文字母大小写，0-9 ，_或 $ 组成</li>
<li>数字不可以开头</li>
<li>不可以使用关键字和保留字，但能包含关键字和保留字</li>
<li>Java中严格区分大小写，长度无限制</li>
<li>标识符不能包含空格</li>
</ul>
<h3 id="良好的命名规范（不遵守，也不会出现编译的错误）"><a href="#良好的命名规范（不遵守，也不会出现编译的错误）" class="headerlink" title="良好的命名规范（不遵守，也不会出现编译的错误）"></a>良好的命名规范（不遵守，也不会出现编译的错误）</h3><ul>
<li>包名：多单词组成时所有字母都小写：xxxyyyzzz</li>
<li>类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz</li>
<li>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz</li>
<li>常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ</li>
</ul>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>数据类型是程序设计语言描述事物、对象的方法。Java 数据类型分为内置类型和扩展类型两大类。内置类型就是 Java 语言本身提供的基本数据类型，比如，整型数，浮点数，字符，布尔值等等。而扩展类型则是 Java 语言根据基本类型扩展出的其他类型（引用数据类型），Java 要求所有的扩展类型都必须包括在类定义里面，这就是 Java 为什么是面向对象编程语言的原因。虽然不同于纯粹的面向对象语言那样，比如 SmallTalk，Java 保留了基本数据类型，但这主要是为满足Java高效率执行的要求。JRE（Java Runtime Environment）提供了丰富实用的扩展类型供程序员使用，而且通过类的继承机制也可以根据需要自己扩展。</p>
<p>内置类型也称作基本类型（Primitive Types），是其他类型的基础。所有的其他类型（包括Java核心库和用户自定义类型）都是通过基本类型扩展而来的。<br><img src="http://i.imgur.com/jDYJo0a.png" alt=""></p>
<h3 id="变量和常量"><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h3><p>####变量<br>在程序设计中，变量是一种存储数据的载体。计算机中的变量是实际存在的数据，与数学方程中抽象的“变量”存在本质区别。变量的数值可以被读取和修改，是所有计算的基础。在程序执行的过程中，在某个范围内其值可以发生改变的。变量定义格式：数据类型 变量名 = 初始化值;Java 语言是强类型语言，对于每一种数据都定义了明确的具体数据类型，在内存总分配了不同大小的内存空间。</p>
<p>按数据类型分类（共 8 种）：</p>
<ul>
<li>整型：byte、short、int（默认）、long</li>
<li>浮点型：float、double（默认）</li>
<li>字符型：char</li>
<li>布尔型：booble</li>
</ul>
<p>变量按被声明的位置划分：</p>
<ul>
<li>成员变量</li>
<li>局部变量</li>
</ul>
<h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>在程序执行的过程中其值不可以发生改变的永久数据。在Java中用final标志,虽然常量名也可以用小写，但为了便于识别，通常使用大写字母表示常量。<br>示例：<code>final double PI = 3.1415927;</code></p>
<p>十六进制整型常量：以十六进制表示时，需以0x或0X开头，如0xff,0X9A。<br>八进制整型常量：八进制必须以0开头，如0123，034。<br>长整型：长整型必须以L作结尾，如9L,342L。浮点数常量：由于小数常量的默认类型是 double 型，所以 float 类型的后面一定要加f(F)。同样带小数的变量默认为double类型。如：<code>float f;f = 1.3f;</code> 必须声明f。</p>
<p>字符常量：字符型常量需用两个单引号括起来（注意字符串常量是用两个双引号括起来）。Java中的字符占两个字节。一些常用的转义字符：</p>
<ul>
<li><code>\r</code> 表示接受键盘输入，相当于按下了回车键</li>
<li><code>\n</code> 表示换行</li>
<li><code>\t</code> 表示制表符，相当于 Table 键</li>
<li><code>\b</code> 表示退格键，相当于 Back Space 键</li>
<li><code>\&#39;</code> 表示单引号</li>
<li><code>\&#39;&#39;</code> 表示双引号</li>
<li><code>\\</code> 表示一个斜杠 \</li>
</ul>
<h3 id="变量的运算"><a href="#变量的运算" class="headerlink" title="变量的运算"></a>变量的运算</h3><p>简单类型数据间的转换,有两种方式:自动转换和强制转换,通常发生在表达式中或方法的参数传递时。</p>
<p>自动类型转换:<br>具体地讲,当一个较”小”数据与一个较”大”的数据一起运算时,系统将自动将”小”数据转换成”大”数据,再进行运算。而在方法调用时,实际参数较”小”,而被调用的方法的形式参数数据又是较”大”时(若有匹配的,当然会直接调用匹配的方法),系统也将自动将”小”数据转换成”大”数据,再进行方法的调用,自然,对于多个同名的重载方法,会转换成最”接近”的”大”数据并进行调用。这些类型由”小”到”大”分别为 (byte，short，char) –&gt; int –&gt; long –&gt; float –&gt; double。这里我们所说的”大”与”小”,并不是指占用字节的多少,而是指表示值的范围的大小。</p>
<ul>
<li><p>下面的语句可以在 Java 中直接通过:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">byte</span> b;</div><div class="line"><span class="keyword">int</span> i = b; </div><div class="line"><span class="keyword">long</span> l = b; </div><div class="line"><span class="keyword">float</span> f = b; </div><div class="line"><span class="keyword">double</span> d = b;</div></pre></td></tr></table></figure>
</li>
<li><p>如果低级类型为 char 型，向高级类型（整型）转换时，会转换为对应 ASCII 码值，例如</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> c = <span class="string">'c'</span>; </div><div class="line"><span class="keyword">int</span> i = c;</div><div class="line">System.out.println(<span class="string">"output:"</span>+i);	<span class="comment">// 输出：99;</span></div></pre></td></tr></table></figure>
</li>
<li><p>对于byte,short,char三种类型而言，他们是平级的，因此不能相互自动转换，可以使用下述的强制类型转换。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">short</span> i = <span class="number">99</span>; </div><div class="line"><span class="keyword">char</span> c=(<span class="keyword">char</span>)i; </div><div class="line">System.out.println(<span class="string">"output:"</span>+c);	<span class="comment">// 输出：c;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>强制类型转换：<br>将”大”数据转换为”小”数据时，你可以使用强制类型转换。即你必须采用下面这种语句格式： <code>int i = (int)3.14159/2;</code>可以想象，这种转换肯定可能会导致溢出或精度的下降。</p>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>计算机的最基本用途之一就是执行数学运算，作为一门计算机语言，Java 提供了一套丰富的运算符来操纵变量。我们可以把运算符分成以下几组：</p>
<ul>
<li>算术运算符</li>
<li>关系运算符</li>
<li>位运算符</li>
<li>逻辑运算符</li>
<li>赋值运算符</li>
<li>其他运算符</li>
</ul>
<h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><p>算术运算符用在数学表达式中，它们的作用和在数学中的作用一样<br><img src="http://i.imgur.com/nf4fhms.png" alt=""></p>
<p>示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">     <span class="keyword">int</span> a = <span class="number">10</span>;</div><div class="line">     <span class="keyword">int</span> b = <span class="number">20</span>;</div><div class="line">     <span class="keyword">int</span> c = <span class="number">25</span>;</div><div class="line">     <span class="keyword">int</span> d = <span class="number">25</span>;</div><div class="line">     System.out.println(<span class="string">"a + b = "</span> + (a + b) );	<span class="comment">// a + b = 30</span></div><div class="line">     System.out.println(<span class="string">"a - b = "</span> + (a - b) );	<span class="comment">// a - b = -10</span></div><div class="line">     System.out.println(<span class="string">"a * b = "</span> + (a * b) );    <span class="comment">// a * b = 200</span></div><div class="line">     System.out.println(<span class="string">"b / a = "</span> + (b / a) );    <span class="comment">// b / a = 2</span></div><div class="line">     System.out.println(<span class="string">"b % a = "</span> + (b % a) );    <span class="comment">// b % a = 0</span></div><div class="line">     System.out.println(<span class="string">"c % a = "</span> + (c % a) );    <span class="comment">// c % a = 5</span></div><div class="line">     System.out.println(<span class="string">"a++   = "</span> +  (a++) ); 	<span class="comment">// a++   = 10</span></div><div class="line">     System.out.println(<span class="string">"a--   = "</span> +  (a--) );     <span class="comment">// a--   = 11</span></div><div class="line">     <span class="comment">// 查看  d++ 与 ++d 的不同</span></div><div class="line">     System.out.println(<span class="string">"d++   = "</span> +  (d++) );     <span class="comment">// d++   = 25</span></div><div class="line">     System.out.println(<span class="string">"++d   = "</span> +  (++d) );     <span class="comment">// ++d   = 27</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="自增（-）自减（–）运算符"><a href="#自增（-）自减（–）运算符" class="headerlink" title="自增（++）自减（–）运算符"></a>自增（++）自减（–）运算符</h5><p>自增（++）自减（–）运算符是一种特殊的算术运算符，在算术运算符中需要两个操作数来进行运算，而自增自减运算符是一个操作数。</p>
<ul>
<li>前缀自增自减法(++a,–a): 先进行自增或者自减运算，再进行表达式运算。</li>
<li>后缀自增自减法(a++,a–): 先进行表达式运算，再进行自增或者自减运算 </li>
</ul>
<p>在不进行赋值的操作下前缀自增自减法和后缀自增自减法没有区别，区别只发生在赋值操作下。</p>
<p>示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">selfAddMinus</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> a = <span class="number">5</span>;<span class="comment">//定义一个变量；</span></div><div class="line">        <span class="keyword">int</span> b = <span class="number">5</span>;</div><div class="line">        <span class="keyword">int</span> x = <span class="number">2</span>*++a;</div><div class="line">        <span class="keyword">int</span> y = <span class="number">2</span>*b++;</div><div class="line">        System.out.println(<span class="string">"自增运算符前缀运算后"</span>+a+<span class="string">",x="</span>+x);  <span class="comment">// a=6，x=12</span></div><div class="line">        System.out.println(<span class="string">"自增运算符后缀运算后b="</span>+b+<span class="string">",y="</span>+y);<span class="comment">// b=6，y=10</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><p>下表为 Java 支持的关系运算符,表格中的实例整数变量A的值为10，变量B的值为20：<br><img src="http://i.imgur.com/Ii3KCr2.png" alt=""></p>
<p>示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">     <span class="keyword">int</span> a = <span class="number">10</span>;</div><div class="line">     <span class="keyword">int</span> b = <span class="number">20</span>;</div><div class="line">     System.out.println(<span class="string">"a == b = "</span> + (a == b) );	<span class="comment">// a == b = false</span></div><div class="line">     System.out.println(<span class="string">"a != b = "</span> + (a != b) );	<span class="comment">// a != b = true</span></div><div class="line">     System.out.println(<span class="string">"a &gt; b = "</span> + (a &gt; b) );	  <span class="comment">// a &gt; b = false</span></div><div class="line">     System.out.println(<span class="string">"a &lt; b = "</span> + (a &lt; b) );	  <span class="comment">// a &lt; b = true</span></div><div class="line">     System.out.println(<span class="string">"b &gt;= a = "</span> + (b &gt;= a) );	<span class="comment">// b &gt;= a = true</span></div><div class="line">     System.out.println(<span class="string">"b &lt;= a = "</span> + (b &lt;= a) );	<span class="comment">// b &lt;= a = false</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><p>Java定义了位运算符，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型(byte)等类型。位运算符作用在所有的位上，并且按位运算。假设 a = 60，b = 13;它们的二进制格式表示将如下：<br><img src="http://i.imgur.com/HxQytZm.png" alt=""></p>
<p>下表列出了位运算符的基本运算,假设整数变量A的值为60和变量B的值为13：<br><img src="http://i.imgur.com/iC3MXwg.png" alt=""></p>
<p>示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">     <span class="keyword">int</span> a = <span class="number">60</span>; <span class="comment">/* 60 = 0011 1100 */</span> </div><div class="line">     <span class="keyword">int</span> b = <span class="number">13</span>; <span class="comment">/* 13 = 0000 1101 */</span></div><div class="line">     <span class="keyword">int</span> c = <span class="number">0</span>;</div><div class="line">     c = a &amp; b;       <span class="comment">/* 12 = 0000 1100 */</span></div><div class="line">     System.out.println(<span class="string">"a &amp; b = "</span> + c );		<span class="comment">// a &amp; b = 12</span></div><div class="line"></div><div class="line">     c = a | b;       <span class="comment">/* 61 = 0011 1101 */</span></div><div class="line">     System.out.println(<span class="string">"a | b = "</span> + c );		<span class="comment">// a | b = 61</span></div><div class="line"></div><div class="line">     c = a ^ b;       <span class="comment">/* 49 = 0011 0001 */</span></div><div class="line">     System.out.println(<span class="string">"a ^ b = "</span> + c );		<span class="comment">// a ^ b = 49</span></div><div class="line"></div><div class="line">     c = ~a;          <span class="comment">/*-61 = 1100 0011 */</span></div><div class="line">     System.out.println(<span class="string">"~a = "</span> + c );           <span class="comment">//  ~a = -61</span></div><div class="line"></div><div class="line">     c = a &lt;&lt; <span class="number">2</span>;     <span class="comment">/* 240 = 1111 0000 */</span></div><div class="line">     System.out.println(<span class="string">"a &lt;&lt; 2 = "</span> + c );       <span class="comment">// a &lt;&lt; 2 = 240</span></div><div class="line"></div><div class="line">     c = a &gt;&gt; <span class="number">2</span>;     <span class="comment">/* 15 = 1111 */</span></div><div class="line">     System.out.println(<span class="string">"a &gt;&gt; 2  = "</span> + c );      <span class="comment">// a &gt;&gt; 15</span></div><div class="line">  </div><div class="line">     c = a &gt;&gt;&gt; <span class="number">2</span>;     <span class="comment">/* 15 = 0000 1111 */</span></div><div class="line">     System.out.println(<span class="string">"a &gt;&gt;&gt; 2 = "</span> + c );      <span class="comment">// a &gt;&gt;&gt; 15</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>下表列出了逻辑运算符的基本运算，假设布尔变量 A 为真，变量 B 为假<br><img src="http://i.imgur.com/oWsaixl.png" alt=""></p>
<p>示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</div><div class="line">        System.out.println(a &amp;&amp; b);		<span class="comment">// false</span></div><div class="line">		System.out.println(a || b);		<span class="comment">// true</span></div><div class="line">		System.out.println(!(a &amp;&amp; b));	 <span class="comment">// true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p><img src="http://i.imgur.com/JbLNunh.png" alt=""></p>
<p>示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">     <span class="keyword">int</span> a = <span class="number">10</span>;</div><div class="line">     <span class="keyword">int</span> b = <span class="number">20</span>;</div><div class="line">     <span class="keyword">int</span> c = <span class="number">0</span>;</div><div class="line">     c = a + b;</div><div class="line">     System.out.println(<span class="string">"c = a + b = "</span> + c );	<span class="comment">// c = a + b = 30</span></div><div class="line">     c += a ;</div><div class="line">     System.out.println(<span class="string">"c += a  = "</span> + c );	  <span class="comment">// c += a  = 40</span></div><div class="line">     c -= a ;</div><div class="line">     System.out.println(<span class="string">"c -= a = "</span> + c );       <span class="comment">// c -= a = 30</span></div><div class="line">     c *= a ;</div><div class="line">     System.out.println(<span class="string">"c *= a = "</span> + c );       <span class="comment">// c *= a = 300</span></div><div class="line">     a = <span class="number">10</span>;</div><div class="line">     c = <span class="number">15</span>;</div><div class="line">     c /= a ;</div><div class="line">     System.out.println(<span class="string">"c /= a = "</span> + c );       <span class="comment">// c /= a = 1</span></div><div class="line">     a = <span class="number">10</span>;</div><div class="line">     c = <span class="number">15</span>;</div><div class="line">     c %= a ;</div><div class="line">     System.out.println(<span class="string">"c %= a  = "</span> + c );      <span class="comment">// c %= a  = 5</span></div><div class="line">     c &lt;&lt;= <span class="number">2</span> ;</div><div class="line">     System.out.println(<span class="string">"c &lt;&lt;= 2 = "</span> + c );      <span class="comment">// c &lt;&lt;= 2 = 20</span></div><div class="line">     c &gt;&gt;= <span class="number">2</span> ;</div><div class="line">     System.out.println(<span class="string">"c &gt;&gt;= 2 = "</span> + c );      <span class="comment">// c &gt;&gt;= 2 = 5</span></div><div class="line">     c &gt;&gt;= <span class="number">2</span> ;</div><div class="line">     System.out.println(<span class="string">"c &gt;&gt;= a = "</span> + c );      <span class="comment">// c &gt;&gt;= 2 = 1</span></div><div class="line">     c &amp;= a ;</div><div class="line">     System.out.println(<span class="string">"c &amp;= 2  = "</span> + c );      <span class="comment">// c &amp;= a  = 0</span></div><div class="line">     c ^= a ;</div><div class="line">     System.out.println(<span class="string">"c ^= a   = "</span> + c );     <span class="comment">// c ^= a   = 10</span></div><div class="line">     c |= a ;</div><div class="line">     System.out.println(<span class="string">"c |= a   = "</span> + c );     <span class="comment">// c |= a   = 10</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="条件运算符（-）"><a href="#条件运算符（-）" class="headerlink" title="条件运算符（?:）"></a>条件运算符（?:）</h4><p>条件运算符也被称为三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;跟任何编程语言一样，Java 语言拥有自己的结构、语法规则和编程范例。Java 语言的编程范例基于面向对象编程 (OOP) 的概念。Java 语言是 C 语言的一种衍生语言，所以它的语法规则与 C 语言的语法规则非常相似。例如，方法使代码模块化并使用花括号（{ 和 }）分隔，变量需要在使用之前声明。在结构上，Java 语言以包 作为开头。包是 Java 语言的命名空间机制。包中包含类，而类中包含方法、变量、常量等。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript</title>
    <link href="http://yoursite.com/2016/10/28/note_js/"/>
    <id>http://yoursite.com/2016/10/28/note_js/</id>
    <published>2016-10-28T08:50:21.644Z</published>
    <updated>2016-10-28T12:11:42.544Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编写可维护的JavaScript代码"><a href="#编写可维护的JavaScript代码" class="headerlink" title="编写可维护的JavaScript代码"></a>编写可维护的JavaScript代码</h2><h2 id="变量、作用域、和内存"><a href="#变量、作用域、和内存" class="headerlink" title="变量、作用域、和内存"></a>变量、作用域、和内存</h2><p>由于javaScript的变量是松散类型的，所以javaScript里的变量只是特定时间保存特定值的一个名字而已、不存在定义某个变量就必须要保存某种数据类型值的规则，变量的值及其数据类型可以在脚本的生命周期内改变。<br><a id="more"></a></p>
<h3 id="基本类型和引用数据类型的值"><a href="#基本类型和引用数据类型的值" class="headerlink" title="基本类型和引用数据类型的值"></a>基本类型和引用数据类型的值</h3><p>JavaScript中有两种数据类型：基本数据类型和引用数据类型。在将一个值赋给一个变量时解析器必须知道这个值是基本数据类型还是引用数据类型。那么基本数据类型指的其实就是简单的数据段，而引用数据类型指的是由多个值构成的对象。</p>
<ul>
<li>基本数据类型包括Undefined、Null、Bollean、Number、String。由于基本数据类型操作的是保存在变量中实际的值，所以基本数据类型是按值访问的。</li>
<li>引用数据类型包括Function、Arrry、Date等。由于引用数据类型的值是保存在内存中的对象，而JavaScript不允许直接访问内存中的位置（不能直接操作对象的内存空间），所以在操作对象的时候实际上是通过栈内存中对象的引用（保存着对象的地址值）间接的操作对象，而不是直接的操作堆内存中的对象本身。</li>
</ul>
<h3 id="动态的属性"><a href="#动态的属性" class="headerlink" title="动态的属性"></a>动态的属性</h3><p>定义引用数据类型和基本数据类型的方式是类似的：创建一个变量并为该变量赋值。但是当值保存到变量中以后，对于不同类型值的操作却有很大差别。对于引用数据类型的值，我们可以为其添加属性和方法以便将来使用，当然也可以删除其属性和方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">person.name = <span class="string">'张三'</span>;</div><div class="line">alert(person.name);	<span class="comment">//张三</span></div></pre></td></tr></table></figure></p>
<h3 id="复制变量的值"><a href="#复制变量的值" class="headerlink" title="复制变量的值"></a>复制变量的值</h3><p>除了保存方式的不同以外，基本数据类型和引用数据类型在从一个变量向另一个变量复制的时候也存在着差异。</p>
<ul>
<li><p>当一个变量向另一个变量复制基本数据类型时，会创建一个新值，然后把该值存放到一个新的变量上,也就是说新变量的值和被复制变量的值之间是完全独立的,不会影响之后的操作。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line"><span class="keyword">var</span> b = a;</div><div class="line">alert(b);	<span class="comment">//10</span></div><div class="line">alert(a);	<span class="comment">//10</span></div><div class="line">a = <span class="number">20</span>;	  <span class="comment">//把a的值修改为20</span></div><div class="line">alert(a);	<span class="comment">//20</span></div><div class="line">alert(b);	<span class="comment">//10</span></div></pre></td></tr></table></figure>
</li>
<li><p>当一个变量向另一个变量复制引用数据类型时，会把存储在变量中的值复制一份保存在新变量的空间内：在堆内存中的对象本体会有一个首地址值（以哈希码呈现），而栈内存中的变量保存着这个首地址值，当两个地址值相同时，变量将引用这个对象。那么把存储在变量中的地址值复制一份保存在新变量的空间内，也就是有两个变量同时都引用着同一个对象，那么修改其中一个变量将会影响到另一个变量。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"><span class="keyword">var</span> b = a;</div><div class="line">a.name = <span class="string">'张三'</span>;</div><div class="line">alert(a.name);	<span class="comment">//张三</span></div><div class="line">alert(b.name);	<span class="comment">//张三</span></div><div class="line">b.age = <span class="number">18</span>;</div><div class="line">alert(a.age);	 <span class="comment">//18</span></div><div class="line">alert(b.age);	 <span class="comment">//18</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><p>JavaScript中函数参数的传递都是按值传递的。把函数外部的值复制给函数内部的参数，和一个变量的值复制给另一个变量相同。基本类型值的传递和基本类型值的复制一样，引用数据类型的传递和引用数据类型的复制一样。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//基本数据类型值传递</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTen</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">  num += <span class="number">10</span>;</div><div class="line">  <span class="keyword">return</span> num;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a = <span class="number">20</span>;</div><div class="line"><span class="keyword">var</span> result = addTen(a);</div><div class="line">alert(result);	<span class="comment">//30</span></div><div class="line">alert(a);		 <span class="comment">//20</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//引用数据类型值传递</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  obj.name = <span class="string">'张三'</span>;</div><div class="line">  obj = <span class="keyword">new</span> <span class="built_in">Object</span>(); <span class="comment">//obj指向了一个新的对象，与原来的对象断开引用关系,obj里面将保存这个新对象的首地址值</span></div><div class="line">  obj.name = <span class="string">'李四'</span>;</div><div class="line">&#125;	<span class="comment">//在函数里面定义的对象属于局部对象，函数执行完毕之后会被销毁</span></div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">setName(person);</div><div class="line">alert(person.name);   <span class="comment">//张三</span></div></pre></td></tr></table></figure>
<h3 id="检测类型"><a href="#检测类型" class="headerlink" title="检测类型"></a>检测类型</h3><p>使用typeof 操作符是判断一个变量是Sring、Number、boolean和Undefined的最佳方式。如果变量是一个Object或Null，而typeof操作符会返回同样的结果<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="string">'hi'</span>;</div><div class="line"><span class="keyword">var</span> b = <span class="number">10</span>;</div><div class="line"><span class="keyword">var</span> c = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> d;</div><div class="line"><span class="keyword">var</span> e = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"><span class="keyword">var</span> f = <span class="literal">null</span>;</div><div class="line">alert(<span class="keyword">typeof</span> a);	<span class="comment">//string</span></div><div class="line">alert(<span class="keyword">typeof</span> b);	<span class="comment">//number</span></div><div class="line">alert(<span class="keyword">typeof</span> c);	<span class="comment">//boolean</span></div><div class="line">alert(<span class="keyword">typeof</span> d);	<span class="comment">//ndefined</span></div><div class="line">alert(<span class="keyword">typeof</span> e);	<span class="comment">//object</span></div><div class="line">alert(<span class="keyword">typeof</span> f);	<span class="comment">//object</span></div></pre></td></tr></table></figure></p>
<p>确定一个值是哪种引用数据类型可以使用instanceof操作符<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"><span class="comment">//变量person是Object吗</span></div><div class="line">alert(person <span class="keyword">instanceof</span> <span class="built_in">Object</span>);	<span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">alert(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>);		<span class="comment">//true</span></div><div class="line">alert(arr <span class="keyword">instanceof</span> <span class="built_in">Object</span>);	   <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>在JavaScript里面所有引用数据类型的值都是Object的实例，因此在检测一个引用数据类型和Object构造函数时，instanceof始终返回true，如果用instanceof操作符检测基本数据类型的值，instanceof始终返回false，因为基本数据类型不是对象。</p>
<h3 id="执行环境和作用域"><a href="#执行环境和作用域" class="headerlink" title="执行环境和作用域"></a>执行环境和作用域</h3><p>执行环境（execution context简称-EC，也被称为执行上下文、上下文、环境、作用域等）是Javascript中非常重要的概念，是类似于栈的一个结构。它定义了变量或函数有权访问的其它数据，决定了它们各自的行为。每个执行环境都有一个与之关联的变量对象（variable object），执行环境中定义的所有变量（包含形参）和函数都保存在这个对象中。我们编写的代码无法访问这个对象，但是解析器在处理数据时会在后台使用它。JavaScript主要有三种作用域：全局、函数（局部）、eval。</p>
<p>全局执行环境是最外围的一个执行环境。在Web浏览器中全局执行环境指的是window对象（node.js中指的是global对象），所有的变量和函数都是作为window对象的属性和方法创建的。当执行环境中的所有代码执行完毕后，该环境被销毁，保存在其中的变量和函数定义也随之被销毁。全局执行环境当应用程序退出（关闭网页或关闭浏览器）时被销毁。</p>
<p>每个函数都有自己的执行环境。当执行流进入到一个函数时，函数的执行环境会被推入一个环境栈中（栈的底部始终是全局环境，顶部是当前活动的执行环境），函数执行完毕后，环境栈将其函数的执行环境弹出，把控制权交还给之前的执行环境。</p>
<p>当代码在一个执行环境中执行时，会创建变量对象的一个作用域链（scope chain）。作用域链的作用是保证有序的对执行环境有权访问的所有变量和函数。作用域链的前端，始终都是当前执行代码所在执行环境的变量对象。如果这个执行环境是函数，那么则将其活动对象（acyivation object 也被称为激活对象）作为变量对象，活动对象最开始只包含一个变量，即arguments对象（这个对象在全局执行环境中是不存在的）。全局执行环境的变量对象始终都是作用域链的最后一个对象。</p>
<p>标识符解析是沿着作用域链一级一级的向外搜索的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//全局执行环境中有一个变量color和函数changeColor()</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> color = <span class="string">'blue'</span>;	<span class="comment">//全局变量</span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">changeColor()的作用域链包含两个变量对象：自己的变量对象（其中定义着arguments对象）和</div><div class="line">全局环境的变量对象（其中定义着color变量）</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeColor</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(color === <span class="string">'blue'</span>) &#123;</div><div class="line">    color = <span class="string">'red'</span>;</div><div class="line">  &#125;<span class="keyword">else</span> &#123;</div><div class="line">    color = <span class="string">'blue'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">changeColor();</div><div class="line">alert(color);	<span class="comment">//red</span></div></pre></td></tr></table></figure></p>
<p>在局部作用域中定义的变量可以在局部执行环境中与全局变量互换使用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//全局执行环境中有一个变量color和函数changeColor()</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> color = <span class="string">'blue'</span>; <span class="comment">//全局变量</span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">changeColor()局部执行环境中有一个变量anotherColor和函数swapColor()，</div><div class="line">但该执行环境可以访问全局执行环境中的变量color，因为全局执行环境是该环境的父执行环境</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeColor</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> anotherColor = <span class="string">'red'</span>;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">    swapColor()局部执行环境中只有一个变量tempColor，</div><div class="line">    但该执行环境可以访问全局执行环境中的变量color和changeColor()局部执行环境中的变量anotherColor，</div><div class="line">    因为全局执行环境是changeColor()局部执行环境的父执行环境，</div><div class="line">    而changeColor()局部执行环境又是swapColor()局部执行环境的父执行环境</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">swapColor</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> tempColor = anotherColor;</div><div class="line">        anotherColor = color;</div><div class="line">        color = tempColor;</div><div class="line">    &#125;</div><div class="line">    swapColor();</div><div class="line">&#125;</div><div class="line"></div><div class="line">changeColor();</div><div class="line">alert(color);</div></pre></td></tr></table></figure></p>
<p>内部环境可以通过作用域链访问所有的外部环境，但外部环境不能访问内部环境中的任何变量和函数。而且这些环境之间的联系是线性的、有序的。每个环境都可以向上搜索作用域链，以查询变量名和函数名，但任何环境都不能向下搜索作用域链而进入到另一个执行环境。以上代码中，swapColor()的作用域链中包含三个变量对象：swapColor的变量对象、changeColor()的变量对象和全局变量对象。swapColor()的局部执行环境开始会先在自己的变量对象中搜索变量和函数名，如果搜索不到会沿着作用域链逐级向上（外）搜索。</p>
<h3 id="没有块级作用域"><a href="#没有块级作用域" class="headerlink" title="没有块级作用域"></a>没有块级作用域</h3><p>在其他类C语言中由花括号封闭的代码块都会有自己的作用域（这里叫做执行环境），从而支持根据条件来定义变量。但在JavaSAcript中是没有块级作用域的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//if和for语句中的变量声明会将变量添加到当前执行环境（全局执行环境）	</span></div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="string">'hi'</span>;</div><div class="line">&#125;</div><div class="line">alert(a);	<span class="comment">//hi</span></div><div class="line">alert(<span class="built_in">window</span>.a);	<span class="comment">//hi</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">alert(i);	<span class="comment">//2</span></div><div class="line">alert(<span class="built_in">window</span>.i);	<span class="comment">//2</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;编写可维护的JavaScript代码&quot;&gt;&lt;a href=&quot;#编写可维护的JavaScript代码&quot; class=&quot;headerlink&quot; title=&quot;编写可维护的JavaScript代码&quot;&gt;&lt;/a&gt;编写可维护的JavaScript代码&lt;/h2&gt;&lt;h2 id=&quot;变量、作用域、和内存&quot;&gt;&lt;a href=&quot;#变量、作用域、和内存&quot; class=&quot;headerlink&quot; title=&quot;变量、作用域、和内存&quot;&gt;&lt;/a&gt;变量、作用域、和内存&lt;/h2&gt;&lt;p&gt;由于javaScript的变量是松散类型的，所以javaScript里的变量只是特定时间保存特定值的一个名字而已、不存在定义某个变量就必须要保存某种数据类型值的规则，变量的值及其数据类型可以在脚本的生命周期内改变。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 权威指南</title>
    <link href="http://yoursite.com/2016/09/24/HTTP%E5%8D%8F%E8%AE%AE/"/>
    <id>http://yoursite.com/2016/09/24/HTTP协议/</id>
    <published>2016-09-24T13:25:10.586Z</published>
    <updated>2016-10-28T12:12:37.031Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP概述"><a href="#HTTP概述" class="headerlink" title="HTTP概述"></a>HTTP概述</h2><h3 id="OSI、TCP-IP、HTTP"><a href="#OSI、TCP-IP、HTTP" class="headerlink" title="OSI、TCP/IP、HTTP"></a>OSI、TCP/IP、HTTP</h3><p><strong>开放系统互连参考模型 (Open System Interconnect 简称 OSI）</strong>是国际标准化组织(ISO)和国际电报电话咨询委员会(CCITT)联合制定的开放系统互连参考模型，为开放式互连信息系统提供了一种功能结构的框架。它从低到高分别是：物理层、数据链路层、<strong>网络层</strong>、<strong>传输层</strong>、会话层、表示层和<strong>应用层</strong>。</p>
<p><strong>Transmission Control Protocol/Internet Protocol</strong>的简写，中译名为<strong>传输控制协议/因特网互联协议</strong>，又名<strong>网络通讯协议</strong>，是 Internet 最基本的协议、Internet 国际互联网络的基础，由 OSI 七层模型中<strong>传输层的 TCP 协议</strong>和<strong>网络层的 IP 协议</strong>组成。TCP/IP 定义了电子设备如何连入因特网，以及数据如何在它们之间传输的标准。协议采用了4层的层级结构，每一层都呼叫它的下一层所提供的协议来完成自己的需求。通俗而言：TCP 负责发现传输的问题，一有问题就发出信号，要求重新传输，直到所有数据安全正确地传输到目的地。而IP是给因特网的每一台联网设备规定一个地址。</p>
<p><strong>超文本传输协议（HTTP，HyperText Transfer Protocol)</strong>是互联网上应用最为广泛的一种网络协议，属于 OSI 七层模型下<strong>应用层</strong>的一种协议。所有的 WWW 文件都必须遵守这个标准。设计 HTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法。1960 年美国人 Ted Nelson 构思了一种通过计算机处理文本信息的方法，并称之为超文本（hypertext）,这成为了 HTTP 超文本传输协议标准架构的发展根基。Ted Nelson 组织协调万维网协会（World Wide Web Consortium）和互联网工程工作小组（Internet Engineering Task Force ）共同合作研究，最终发布了一系列的 RFC，其中著名的 RFC 2616定义了HTTP 1.1。</p>
<p>IP 代表网际协议，TCP 使用该协议从一个网络传送数据包到另一个网络。把 IP 想像成一种高速公路，它允许其它协议在上面行驶并找到到其它电脑的出口。TCP 是高速公路上的“卡车”，它们携带的货物就是像 HTTP这样的协议。<br><a id="more"></a><br>我们在传输数据时，可以只使用（传输层）TCP/IP 协议，但是那样的话，如果没有应用层，便无法识别数据内容，如果想要使传输的数据有意义，则必须使用到应用层协议，应用层协议有很多，比如 HTTP、FTP、TELNET 等，也可以自己定义应用层协议。WEB 使用 HTTP 协议作应用层协议，以封装 HTTP 文本信息，然后使用 TCP/IP 做传输层协议将它发到网络上。”</p>
<p>下图显示了 TCP/IP、HTTP 在 OSI 七层模型下的位置<br><img src="http://i.imgur.com/EhJSq9t.png" alt=""></p>
<h3 id="Web-客户端与服务器"><a href="#Web-客户端与服务器" class="headerlink" title="Web 客户端与服务器"></a>Web 客户端与服务器</h3><p>HTTP 是利用 TCP 在<strong> Web 服务器</strong>和<strong>客户端</strong>之间传输信息的协议。客户端使用 Web 浏览器发起 HTTP <strong>请求</strong>给 Web 服务器，Web 服务器<strong>响应</strong>并发送被请求的信息给客户端。Web 内容都是存储在服务器上的。因为 Web 服务器所使用的是 HTTP 协议，所以也会被称为 HTTP 服务器。</p>
<p>最常见的客户端就是 Web 浏览器，比如 Internet Explorer、Google Chrome 及 Firefox。Web 服务器常见的有 Microsoft IIS、IBM WebSphere、BEA WebLogic、Apache、Tomcat。浏览一网站或网页时 Web 浏览器会向服务器发送一条 HTTP 请求，服务器回去寻找所期望的对象，如果成功，就将对象、对象类型、对象长度以及其他一些数据信息放在 HTTP 响应中发送给客户端</p>
<h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><p>Web 服务器是 Web 资源（Web Resource）的宿主。Web 资源是 Web 内容的源头。所有类型的内容的来源都是资源。</p>
<h3 id="媒体类型"><a href="#媒体类型" class="headerlink" title="媒体类型"></a>媒体类型</h3><p>因特网中有数千种不同的数据类型，HTTP 通过 Web 传输的对象都为其定义了名为 <strong>MIME（Multipurpose Internet Mail Extension,多用途因特网邮件扩展，最初设计为解决在不同的电子邮件系统之间搬移报文时存在的问题） 类型</strong>的<strong>数据格式标签</strong>。</p>
<p>Web 服务器会为所有 HTTP 对象数据附加一个 MIME 类型。当 Web 浏览器从服务器中取回一个对象时，会查看其相关的 MIME 类型，看看是否知道该如何处理此对象。</p>
<p>MIME 类型是一种文本标记，表示一种主要的对象类型和一个特定的子类型，中间由一条斜杠分割常见的 MIME 类型如下：</p>
<ul>
<li>text/html：表示HTML格式的文本文档</li>
<li>text/plain：表示普通的 ASCII 文本文档</li>
<li>image/jpeg：表示 JPEG 格式的图片</li>
<li>image/gif：表示 GIF 格式的图片</li>
<li>application/vnd.ms-powerpoint：表示微软的 PowerPoint 文件</li>
</ul>
<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>每个 Web 服务器资源都有一个在世界范围内唯一标识并定位信息资源的名字，这样 Web 客户端就可以知道它们想要搜索的资源是什么了。服务器资源名被称为<strong>统一资源标识符（Uniform Resource Identifier,简称 URI）</strong>。URI 有两种类型，分别为 URL 和 URN</p>
<h3 id="URL-1"><a href="#URL-1" class="headerlink" title="URL"></a>URL</h3><p>统一资源定位符（URL）是资源标识符最常见的形式。URL 描述了一台特定服务器上某资源的特定位置，可以明确说明如何从一个精确、固定的位置获取资源。<br>大部分的 URL 都遵循种标准格式，目前为止几乎所有的 URI 都是 URL</p>
<ol>
<li>方案（scheme）：表示访问资源所使用的协议类型，通常是 HTTP 协议（http://）</li>
<li>服务器的因特网地址（www.google.com）</li>
<li>其余部分表明了 Web 服务器上的某个资源（/index.jsp）</li>
</ol>
<h3 id="URN"><a href="#URN" class="headerlink" title="URN"></a>URN</h3><p>统一资源名（URN）是作为特定内容的唯一名称使用的，与目前的资源所在地无关。使用这些与位置无关的 URN 就可以将资源四处搬移。通过 URN 还可以用同一个名字通过多种网络协议来访问资源。但是 URN 仍旧处于实验阶段，没有大规模使用。</p>
<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>一个 HTTP 事务由一条（从客户端发往服务器的）请求命令和一个（从服务器发回客户端的）响应结果组成。这种通信是通过名为 HTTP 报文（HTTP message）的格式化数据块组成 </p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>HTTP 支持几种不同的请求命令，这些命令被称为 HTTP 方法（HTTP method）。每条 HTTP 报文都包含一个方法，这个方法会告诉服务器要执行什么动作（获取一个 Web 页面、运行一个网关程序、删除一个文件等）<br>常见的 HTTP 方法：</p>
<ul>
<li>GET：从服务器向客户端发送命名资源</li>
<li>PUT：将来自客户端的数据存储到一个命名的服务器资源中去</li>
<li>DELETE：从服务器中删除命名资源</li>
<li>POST：将客户端数据发送到一个服务器网关应用程序</li>
<li>HEAD：仅发送命名资源响应中的 HTTP 首部</li>
</ul>
<h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>每条 HTTP 响应报文返回时都会携带一个状态码。状态码是一个三位数字的代码，告知客户端请求是否成功，或采取其他动作。<br>常见的状态码：</p>
<ul>
<li>200：OK。文档正确返回</li>
<li>302：Redirect（重定向）。到其他地方去获取资源</li>
<li>404：Not Found（没找到）。无法找到这个资源</li>
</ul>
<p>伴随着每个数字的状态码，HTTP 还会发送一条解释性的“原因短语”文本。文本短语主要是为了进行描述，所有的处理过程都是使用的数字码</p>
<h3 id="Web-页面中可以包含多个对象"><a href="#Web-页面中可以包含多个对象" class="headerlink" title="Web 页面中可以包含多个对象"></a>Web 页面中可以包含多个对象</h3><p>应用程序完成一项任务时通常会发布对个 HTTP 事务。比如，Web 浏览器会发布一系列 HTTp 事务来获取并显示一个包含丰富图片的 Web 页面。浏览器会执行一个事务来获取描述页面布局的 HTML “框架”，然后发布另外的 HTTP 事务来获取内个嵌入式图片、图像资源、Java小程序等。这些嵌入式资源还可能位于不同的服务器上。因此，一个“Web 页面”同城并不是单个资源，而是一组资源的集合。复合 Web 页面要为每个嵌入式资源使用一个单独 的 HTTP 事务。</p>
<h3 id="报文"><a href="#报文" class="headerlink" title="报文"></a>报文</h3><p>HTTP 报文是由一行一行简单字符串组成的。HTTP 报文都是纯文本，不是二进制代码，所以可以很方便的读写。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTTP概述&quot;&gt;&lt;a href=&quot;#HTTP概述&quot; class=&quot;headerlink&quot; title=&quot;HTTP概述&quot;&gt;&lt;/a&gt;HTTP概述&lt;/h2&gt;&lt;h3 id=&quot;OSI、TCP-IP、HTTP&quot;&gt;&lt;a href=&quot;#OSI、TCP-IP、HTTP&quot; class=&quot;headerlink&quot; title=&quot;OSI、TCP/IP、HTTP&quot;&gt;&lt;/a&gt;OSI、TCP/IP、HTTP&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;开放系统互连参考模型 (Open System Interconnect 简称 OSI）&lt;/strong&gt;是国际标准化组织(ISO)和国际电报电话咨询委员会(CCITT)联合制定的开放系统互连参考模型，为开放式互连信息系统提供了一种功能结构的框架。它从低到高分别是：物理层、数据链路层、&lt;strong&gt;网络层&lt;/strong&gt;、&lt;strong&gt;传输层&lt;/strong&gt;、会话层、表示层和&lt;strong&gt;应用层&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Transmission Control Protocol/Internet Protocol&lt;/strong&gt;的简写，中译名为&lt;strong&gt;传输控制协议/因特网互联协议&lt;/strong&gt;，又名&lt;strong&gt;网络通讯协议&lt;/strong&gt;，是 Internet 最基本的协议、Internet 国际互联网络的基础，由 OSI 七层模型中&lt;strong&gt;传输层的 TCP 协议&lt;/strong&gt;和&lt;strong&gt;网络层的 IP 协议&lt;/strong&gt;组成。TCP/IP 定义了电子设备如何连入因特网，以及数据如何在它们之间传输的标准。协议采用了4层的层级结构，每一层都呼叫它的下一层所提供的协议来完成自己的需求。通俗而言：TCP 负责发现传输的问题，一有问题就发出信号，要求重新传输，直到所有数据安全正确地传输到目的地。而IP是给因特网的每一台联网设备规定一个地址。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;超文本传输协议（HTTP，HyperText Transfer Protocol)&lt;/strong&gt;是互联网上应用最为广泛的一种网络协议，属于 OSI 七层模型下&lt;strong&gt;应用层&lt;/strong&gt;的一种协议。所有的 WWW 文件都必须遵守这个标准。设计 HTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法。1960 年美国人 Ted Nelson 构思了一种通过计算机处理文本信息的方法，并称之为超文本（hypertext）,这成为了 HTTP 超文本传输协议标准架构的发展根基。Ted Nelson 组织协调万维网协会（World Wide Web Consortium）和互联网工程工作小组（Internet Engineering Task Force ）共同合作研究，最终发布了一系列的 RFC，其中著名的 RFC 2616定义了HTTP 1.1。&lt;/p&gt;
&lt;p&gt;IP 代表网际协议，TCP 使用该协议从一个网络传送数据包到另一个网络。把 IP 想像成一种高速公路，它允许其它协议在上面行驶并找到到其它电脑的出口。TCP 是高速公路上的“卡车”，它们携带的货物就是像 HTTP这样的协议。&lt;br&gt;
    
    </summary>
    
      <category term="HTTP" scheme="http://yoursite.com/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
  </entry>
  
</feed>
