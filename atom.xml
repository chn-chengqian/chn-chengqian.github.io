<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程前</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-10-28T08:21:13.223Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>程前</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2016/09/24/HTTP%E5%8D%8F%E8%AE%AE/"/>
    <id>http://yoursite.com/2016/09/24/HTTP协议/</id>
    <published>2016-09-24T13:25:10.586Z</published>
    <updated>2016-10-28T08:21:13.223Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP概述"><a href="#HTTP概述" class="headerlink" title="HTTP概述"></a>HTTP概述</h2><h3 id="OSI、TCP-IP、HTTP"><a href="#OSI、TCP-IP、HTTP" class="headerlink" title="OSI、TCP/IP、HTTP"></a>OSI、TCP/IP、HTTP</h3><p><strong>开放系统互连参考模型 (Open System Interconnect 简称 OSI）</strong>是国际标准化组织(ISO)和国际电报电话咨询委员会(CCITT)联合制定的开放系统互连参考模型，为开放式互连信息系统提供了一种功能结构的框架。它从低到高分别是：物理层、数据链路层、<strong>网络层</strong>、<strong>传输层</strong>、会话层、表示层和<strong>应用层</strong>。</p>
<p><strong>Transmission Control Protocol/Internet Protocol</strong>的简写，中译名为<strong>传输控制协议/因特网互联协议</strong>，又名<strong>网络通讯协议</strong>，是 Internet 最基本的协议、Internet 国际互联网络的基础，由 OSI 七层模型中<strong>传输层的 TCP 协议</strong>和<strong>网络层的 IP 协议</strong>组成。TCP/IP 定义了电子设备如何连入因特网，以及数据如何在它们之间传输的标准。协议采用了4层的层级结构，每一层都呼叫它的下一层所提供的协议来完成自己的需求。通俗而言：TCP 负责发现传输的问题，一有问题就发出信号，要求重新传输，直到所有数据安全正确地传输到目的地。而IP是给因特网的每一台联网设备规定一个地址。</p>
<p><strong>超文本传输协议（HTTP，HyperText Transfer Protocol)</strong>是互联网上应用最为广泛的一种网络协议，属于 OSI 七层模型下<strong>应用层</strong>的一种协议。所有的 WWW 文件都必须遵守这个标准。设计 HTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法。1960 年美国人 Ted Nelson 构思了一种通过计算机处理文本信息的方法，并称之为超文本（hypertext）,这成为了 HTTP 超文本传输协议标准架构的发展根基。Ted Nelson 组织协调万维网协会（World Wide Web Consortium）和互联网工程工作小组（Internet Engineering Task Force ）共同合作研究，最终发布了一系列的 RFC，其中著名的 RFC 2616定义了HTTP 1.1。</p>
<p>IP 代表网际协议，TCP 使用该协议从一个网络传送数据包到另一个网络。把 IP 想像成一种高速公路，它允许其它协议在上面行驶并找到到其它电脑的出口。TCP 是高速公路上的“卡车”，它们携带的货物就是像 HTTP这样的协议。<br><a id="more"></a><br>我们在传输数据时，可以只使用（传输层）TCP/IP 协议，但是那样的话，如果没有应用层，便无法识别数据内容，如果想要使传输的数据有意义，则必须使用到应用层协议，应用层协议有很多，比如 HTTP、FTP、TELNET 等，也可以自己定义应用层协议。WEB 使用 HTTP 协议作应用层协议，以封装 HTTP 文本信息，然后使用 TCP/IP 做传输层协议将它发到网络上。”</p>
<p>下图显示了 TCP/IP、HTTP 在 OSI 七层模型下的位置<br><img src="http://i.imgur.com/EhJSq9t.png" alt=""></p>
<h3 id="Web-客户端与服务器"><a href="#Web-客户端与服务器" class="headerlink" title="Web 客户端与服务器"></a>Web 客户端与服务器</h3><p>HTTP 是利用 TCP 在<strong> Web 服务器</strong>和<strong>客户端</strong>之间传输信息的协议。客户端使用 Web 浏览器发起 HTTP <strong>请求</strong>给 Web 服务器，Web 服务器<strong>响应</strong>并发送被请求的信息给客户端。Web 内容都是存储在服务器上的。因为 Web 服务器所使用的是 HTTP 协议，所以也会被称为 HTTP 服务器。</p>
<p>最常见的客户端就是 Web 浏览器，比如 Internet Explorer、Google Chrome 及 Firefox。Web 服务器常见的有 Microsoft IIS、IBM WebSphere、BEA WebLogic、Apache、Tomcat。浏览一网站或网页时 Web 浏览器会向服务器发送一条 HTTP 请求，服务器回去寻找所期望的对象，如果成功，就将对象、对象类型、对象长度以及其他一些数据信息放在 HTTP 响应中发送给客户端</p>
<h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><p>Web 服务器是 Web 资源（Web Resource）的宿主。Web 资源是 Web 内容的源头。所有类型的内容的来源都是资源。</p>
<h3 id="媒体类型"><a href="#媒体类型" class="headerlink" title="媒体类型"></a>媒体类型</h3><p>因特网中有数千种不同的数据类型，HTTP 通过 Web 传输的对象都为其定义了名为 <strong>MIME（Multipurpose Internet Mail Extension,多用途因特网邮件扩展，最初设计为解决在不同的电子邮件系统之间搬移报文时存在的问题） 类型</strong>的<strong>数据格式标签</strong>。</p>
<p>Web 服务器会为所有 HTTP 对象数据附加一个 MIME 类型。当 Web 浏览器从服务器中取回一个对象时，会查看其相关的 MIME 类型，看看是否知道该如何处理此对象。</p>
<p>MIME 类型是一种文本标记，表示一种主要的对象类型和一个特定的子类型，中间由一条斜杠分割常见的 MIME 类型如下：</p>
<ul>
<li>text/html：表示HTML格式的文本文档</li>
<li>text/plain：表示普通的 ASCII 文本文档</li>
<li>image/jpeg：表示 JPEG 格式的图片</li>
<li>image/gif：表示 GIF 格式的图片</li>
<li>application/vnd.ms-powerpoint：表示微软的 PowerPoint 文件</li>
</ul>
<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>每个 Web 服务器资源都有一个在世界范围内唯一标识并定位信息资源的名字，这样 Web 客户端就可以知道它们想要搜索的资源是什么了。服务器资源名被称为<strong>统一资源标识符（Uniform Resource Identifier,简称 URI）</strong>。URI 有两种类型，分别为 URL 和 URN</p>
<h3 id="URL-1"><a href="#URL-1" class="headerlink" title="URL"></a>URL</h3><p>统一资源定位符（URL）是资源标识符最常见的形式。URL 描述了一台特定服务器上某资源的特定位置，可以明确说明如何从一个精确、固定的位置获取资源。<br>大部分的 URL 都遵循种标准格式，目前为止几乎所有的 URI 都是 URL</p>
<ol>
<li>方案（scheme）：表示访问资源所使用的协议类型，通常是 HTTP 协议（http://）</li>
<li>服务器的因特网地址（www.google.com）</li>
<li>其余部分表明了 Web 服务器上的某个资源（/index.jsp）</li>
</ol>
<h3 id="URN"><a href="#URN" class="headerlink" title="URN"></a>URN</h3><p>统一资源名（URN）是作为特定内容的唯一名称使用的，与目前的资源所在地无关。使用这些与位置无关的 URN 就可以将资源四处搬移。通过 URN 还可以用同一个名字通过多种网络协议来访问资源。但是 URN 仍旧处于实验阶段，没有大规模使用。</p>
<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>一个 HTTP 事务由一条（从客户端发往服务器的）请求命令和一个（从服务器发回客户端的）响应结果组成。这种通信是通过名为 HTTP 报文（HTTP message）的格式化数据块组成 </p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>HTTP 支持几种不同的请求命令，这些命令被称为 HTTP 方法（HTTP method）。每条 HTTP 报文都包含一个方法，这个方法会告诉服务器要执行什么动作（获取一个 Web 页面、运行一个网关程序、删除一个文件等）<br>常见的 HTTP 方法：</p>
<ul>
<li>GET：从服务器向客户端发送命名资源</li>
<li>PUT：将来自客户端的数据存储到一个命名的服务器资源中去</li>
<li>DELETE：从服务器中删除命名资源</li>
<li>POST：将客户端数据发送到一个服务器网关应用程序</li>
<li>HEAD：仅发送命名资源响应中的 HTTP 首部</li>
</ul>
<h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>每条 HTTP 响应报文返回时都会携带一个状态码。状态码是一个三位数字的代码，告知客户端请求是否成功，或采取其他动作。<br>常见的状态码：</p>
<ul>
<li>200：OK。文档正确返回</li>
<li>302：Redirect（重定向）。到其他地方去获取资源</li>
<li>404：Not Found（没找到）。无法找到这个资源</li>
</ul>
<p>伴随着每个数字的状态码，HTTP 还会发送一条解释性的“原因短语”文本。文本短语主要是为了进行描述，所有的处理过程都是使用的数字码</p>
<h3 id="Web-页面中可以包含多个对象"><a href="#Web-页面中可以包含多个对象" class="headerlink" title="Web 页面中可以包含多个对象"></a>Web 页面中可以包含多个对象</h3><p>应用程序完成一项任务时通常会发布对个 HTTP 事务。比如，Web 浏览器会发布一系列 HTTp 事务来获取并显示一个包含丰富图片的 Web 页面。浏览器会执行一个事务来获取描述页面布局的 HTML “框架”，然后发布另外的 HTTP 事务来获取内个嵌入式图片、图像资源、Java小程序等。这些嵌入式资源还可能位于不同的服务器上。因此，一个“Web 页面”同城并不是单个资源，而是一组资源的集合。复合 Web 页面要为每个嵌入式资源使用一个单独 的 HTTP 事务。</p>
<h3 id="报文"><a href="#报文" class="headerlink" title="报文"></a>报文</h3><p>HTTP 报文是由一行一行简单字符串组成的。HTTP 报文都是纯文本，不是二进制代码，所以可以很方便的读写。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTTP概述&quot;&gt;&lt;a href=&quot;#HTTP概述&quot; class=&quot;headerlink&quot; title=&quot;HTTP概述&quot;&gt;&lt;/a&gt;HTTP概述&lt;/h2&gt;&lt;h3 id=&quot;OSI、TCP-IP、HTTP&quot;&gt;&lt;a href=&quot;#OSI、TCP-IP、HTTP&quot; class=&quot;headerlink&quot; title=&quot;OSI、TCP/IP、HTTP&quot;&gt;&lt;/a&gt;OSI、TCP/IP、HTTP&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;开放系统互连参考模型 (Open System Interconnect 简称 OSI）&lt;/strong&gt;是国际标准化组织(ISO)和国际电报电话咨询委员会(CCITT)联合制定的开放系统互连参考模型，为开放式互连信息系统提供了一种功能结构的框架。它从低到高分别是：物理层、数据链路层、&lt;strong&gt;网络层&lt;/strong&gt;、&lt;strong&gt;传输层&lt;/strong&gt;、会话层、表示层和&lt;strong&gt;应用层&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Transmission Control Protocol/Internet Protocol&lt;/strong&gt;的简写，中译名为&lt;strong&gt;传输控制协议/因特网互联协议&lt;/strong&gt;，又名&lt;strong&gt;网络通讯协议&lt;/strong&gt;，是 Internet 最基本的协议、Internet 国际互联网络的基础，由 OSI 七层模型中&lt;strong&gt;传输层的 TCP 协议&lt;/strong&gt;和&lt;strong&gt;网络层的 IP 协议&lt;/strong&gt;组成。TCP/IP 定义了电子设备如何连入因特网，以及数据如何在它们之间传输的标准。协议采用了4层的层级结构，每一层都呼叫它的下一层所提供的协议来完成自己的需求。通俗而言：TCP 负责发现传输的问题，一有问题就发出信号，要求重新传输，直到所有数据安全正确地传输到目的地。而IP是给因特网的每一台联网设备规定一个地址。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;超文本传输协议（HTTP，HyperText Transfer Protocol)&lt;/strong&gt;是互联网上应用最为广泛的一种网络协议，属于 OSI 七层模型下&lt;strong&gt;应用层&lt;/strong&gt;的一种协议。所有的 WWW 文件都必须遵守这个标准。设计 HTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法。1960 年美国人 Ted Nelson 构思了一种通过计算机处理文本信息的方法，并称之为超文本（hypertext）,这成为了 HTTP 超文本传输协议标准架构的发展根基。Ted Nelson 组织协调万维网协会（World Wide Web Consortium）和互联网工程工作小组（Internet Engineering Task Force ）共同合作研究，最终发布了一系列的 RFC，其中著名的 RFC 2616定义了HTTP 1.1。&lt;/p&gt;
&lt;p&gt;IP 代表网际协议，TCP 使用该协议从一个网络传送数据包到另一个网络。把 IP 想像成一种高速公路，它允许其它协议在上面行驶并找到到其它电脑的出口。TCP 是高速公路上的“卡车”，它们携带的货物就是像 HTTP这样的协议。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
