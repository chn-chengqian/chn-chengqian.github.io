<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>心梦无痕</title>
  <subtitle>chn-chengqian</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-10-30T10:48:31.334Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>程前</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2016/10/30/about/"/>
    <id>http://yoursite.com/2016/10/30/about/</id>
    <published>2016-10-30T10:46:59.403Z</published>
    <updated>2016-10-30T10:48:31.334Z</updated>
    
    <content type="html"><![CDATA[<p>人生就像骑单车。想保持平衡就得往前走。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人生就像骑单车。想保持平衡就得往前走。&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript</title>
    <link href="http://yoursite.com/2016/10/28/note_js/"/>
    <id>http://yoursite.com/2016/10/28/note_js/</id>
    <published>2016-10-28T08:50:21.644Z</published>
    <updated>2016-10-28T12:11:42.544Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编写可维护的JavaScript代码"><a href="#编写可维护的JavaScript代码" class="headerlink" title="编写可维护的JavaScript代码"></a>编写可维护的JavaScript代码</h2><h2 id="变量、作用域、和内存"><a href="#变量、作用域、和内存" class="headerlink" title="变量、作用域、和内存"></a>变量、作用域、和内存</h2><p>由于javaScript的变量是松散类型的，所以javaScript里的变量只是特定时间保存特定值的一个名字而已、不存在定义某个变量就必须要保存某种数据类型值的规则，变量的值及其数据类型可以在脚本的生命周期内改变。<br><a id="more"></a></p>
<h3 id="基本类型和引用数据类型的值"><a href="#基本类型和引用数据类型的值" class="headerlink" title="基本类型和引用数据类型的值"></a>基本类型和引用数据类型的值</h3><p>JavaScript中有两种数据类型：基本数据类型和引用数据类型。在将一个值赋给一个变量时解析器必须知道这个值是基本数据类型还是引用数据类型。那么基本数据类型指的其实就是简单的数据段，而引用数据类型指的是由多个值构成的对象。</p>
<ul>
<li>基本数据类型包括Undefined、Null、Bollean、Number、String。由于基本数据类型操作的是保存在变量中实际的值，所以基本数据类型是按值访问的。</li>
<li>引用数据类型包括Function、Arrry、Date等。由于引用数据类型的值是保存在内存中的对象，而JavaScript不允许直接访问内存中的位置（不能直接操作对象的内存空间），所以在操作对象的时候实际上是通过栈内存中对象的引用（保存着对象的地址值）间接的操作对象，而不是直接的操作堆内存中的对象本身。</li>
</ul>
<h3 id="动态的属性"><a href="#动态的属性" class="headerlink" title="动态的属性"></a>动态的属性</h3><p>定义引用数据类型和基本数据类型的方式是类似的：创建一个变量并为该变量赋值。但是当值保存到变量中以后，对于不同类型值的操作却有很大差别。对于引用数据类型的值，我们可以为其添加属性和方法以便将来使用，当然也可以删除其属性和方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">person.name = <span class="string">'张三'</span>;</div><div class="line">alert(person.name);	<span class="comment">//张三</span></div></pre></td></tr></table></figure></p>
<h3 id="复制变量的值"><a href="#复制变量的值" class="headerlink" title="复制变量的值"></a>复制变量的值</h3><p>除了保存方式的不同以外，基本数据类型和引用数据类型在从一个变量向另一个变量复制的时候也存在着差异。</p>
<ul>
<li><p>当一个变量向另一个变量复制基本数据类型时，会创建一个新值，然后把该值存放到一个新的变量上,也就是说新变量的值和被复制变量的值之间是完全独立的,不会影响之后的操作。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line"><span class="keyword">var</span> b = a;</div><div class="line">alert(b);	<span class="comment">//10</span></div><div class="line">alert(a);	<span class="comment">//10</span></div><div class="line">a = <span class="number">20</span>;	  <span class="comment">//把a的值修改为20</span></div><div class="line">alert(a);	<span class="comment">//20</span></div><div class="line">alert(b);	<span class="comment">//10</span></div></pre></td></tr></table></figure>
</li>
<li><p>当一个变量向另一个变量复制引用数据类型时，会把存储在变量中的值复制一份保存在新变量的空间内：在堆内存中的对象本体会有一个首地址值（以哈希码呈现），而栈内存中的变量保存着这个首地址值，当两个地址值相同时，变量将引用这个对象。那么把存储在变量中的地址值复制一份保存在新变量的空间内，也就是有两个变量同时都引用着同一个对象，那么修改其中一个变量将会影响到另一个变量。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"><span class="keyword">var</span> b = a;</div><div class="line">a.name = <span class="string">'张三'</span>;</div><div class="line">alert(a.name);	<span class="comment">//张三</span></div><div class="line">alert(b.name);	<span class="comment">//张三</span></div><div class="line">b.age = <span class="number">18</span>;</div><div class="line">alert(a.age);	 <span class="comment">//18</span></div><div class="line">alert(b.age);	 <span class="comment">//18</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><p>JavaScript中函数参数的传递都是按值传递的。把函数外部的值复制给函数内部的参数，和一个变量的值复制给另一个变量相同。基本类型值的传递和基本类型值的复制一样，引用数据类型的传递和引用数据类型的复制一样。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//基本数据类型值传递</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTen</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">  num += <span class="number">10</span>;</div><div class="line">  <span class="keyword">return</span> num;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a = <span class="number">20</span>;</div><div class="line"><span class="keyword">var</span> result = addTen(a);</div><div class="line">alert(result);	<span class="comment">//30</span></div><div class="line">alert(a);		 <span class="comment">//20</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//引用数据类型值传递</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  obj.name = <span class="string">'张三'</span>;</div><div class="line">  obj = <span class="keyword">new</span> <span class="built_in">Object</span>(); <span class="comment">//obj指向了一个新的对象，与原来的对象断开引用关系,obj里面将保存这个新对象的首地址值</span></div><div class="line">  obj.name = <span class="string">'李四'</span>;</div><div class="line">&#125;	<span class="comment">//在函数里面定义的对象属于局部对象，函数执行完毕之后会被销毁</span></div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">setName(person);</div><div class="line">alert(person.name);   <span class="comment">//张三</span></div></pre></td></tr></table></figure>
<h3 id="检测类型"><a href="#检测类型" class="headerlink" title="检测类型"></a>检测类型</h3><p>使用typeof 操作符是判断一个变量是Sring、Number、boolean和Undefined的最佳方式。如果变量是一个Object或Null，而typeof操作符会返回同样的结果<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="string">'hi'</span>;</div><div class="line"><span class="keyword">var</span> b = <span class="number">10</span>;</div><div class="line"><span class="keyword">var</span> c = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> d;</div><div class="line"><span class="keyword">var</span> e = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"><span class="keyword">var</span> f = <span class="literal">null</span>;</div><div class="line">alert(<span class="keyword">typeof</span> a);	<span class="comment">//string</span></div><div class="line">alert(<span class="keyword">typeof</span> b);	<span class="comment">//number</span></div><div class="line">alert(<span class="keyword">typeof</span> c);	<span class="comment">//boolean</span></div><div class="line">alert(<span class="keyword">typeof</span> d);	<span class="comment">//ndefined</span></div><div class="line">alert(<span class="keyword">typeof</span> e);	<span class="comment">//object</span></div><div class="line">alert(<span class="keyword">typeof</span> f);	<span class="comment">//object</span></div></pre></td></tr></table></figure></p>
<p>确定一个值是哪种引用数据类型可以使用instanceof操作符<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"><span class="comment">//变量person是Object吗</span></div><div class="line">alert(person <span class="keyword">instanceof</span> <span class="built_in">Object</span>);	<span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">alert(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>);		<span class="comment">//true</span></div><div class="line">alert(arr <span class="keyword">instanceof</span> <span class="built_in">Object</span>);	   <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>在JavaScript里面所有引用数据类型的值都是Object的实例，因此在检测一个引用数据类型和Object构造函数时，instanceof始终返回true，如果用instanceof操作符检测基本数据类型的值，instanceof始终返回false，因为基本数据类型不是对象。</p>
<h3 id="执行环境和作用域"><a href="#执行环境和作用域" class="headerlink" title="执行环境和作用域"></a>执行环境和作用域</h3><p>执行环境（execution context简称-EC，也被称为执行上下文、上下文、环境、作用域等）是Javascript中非常重要的概念，是类似于栈的一个结构。它定义了变量或函数有权访问的其它数据，决定了它们各自的行为。每个执行环境都有一个与之关联的变量对象（variable object），执行环境中定义的所有变量（包含形参）和函数都保存在这个对象中。我们编写的代码无法访问这个对象，但是解析器在处理数据时会在后台使用它。JavaScript主要有三种作用域：全局、函数（局部）、eval。</p>
<p>全局执行环境是最外围的一个执行环境。在Web浏览器中全局执行环境指的是window对象（node.js中指的是global对象），所有的变量和函数都是作为window对象的属性和方法创建的。当执行环境中的所有代码执行完毕后，该环境被销毁，保存在其中的变量和函数定义也随之被销毁。全局执行环境当应用程序退出（关闭网页或关闭浏览器）时被销毁。</p>
<p>每个函数都有自己的执行环境。当执行流进入到一个函数时，函数的执行环境会被推入一个环境栈中（栈的底部始终是全局环境，顶部是当前活动的执行环境），函数执行完毕后，环境栈将其函数的执行环境弹出，把控制权交还给之前的执行环境。</p>
<p>当代码在一个执行环境中执行时，会创建变量对象的一个作用域链（scope chain）。作用域链的作用是保证有序的对执行环境有权访问的所有变量和函数。作用域链的前端，始终都是当前执行代码所在执行环境的变量对象。如果这个执行环境是函数，那么则将其活动对象（acyivation object 也被称为激活对象）作为变量对象，活动对象最开始只包含一个变量，即arguments对象（这个对象在全局执行环境中是不存在的）。全局执行环境的变量对象始终都是作用域链的最后一个对象。</p>
<p>标识符解析是沿着作用域链一级一级的向外搜索的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//全局执行环境中有一个变量color和函数changeColor()</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> color = <span class="string">'blue'</span>;	<span class="comment">//全局变量</span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">changeColor()的作用域链包含两个变量对象：自己的变量对象（其中定义着arguments对象）和</div><div class="line">全局环境的变量对象（其中定义着color变量）</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeColor</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(color === <span class="string">'blue'</span>) &#123;</div><div class="line">    color = <span class="string">'red'</span>;</div><div class="line">  &#125;<span class="keyword">else</span> &#123;</div><div class="line">    color = <span class="string">'blue'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">changeColor();</div><div class="line">alert(color);	<span class="comment">//red</span></div></pre></td></tr></table></figure></p>
<p>在局部作用域中定义的变量可以在局部执行环境中与全局变量互换使用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//全局执行环境中有一个变量color和函数changeColor()</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> color = <span class="string">'blue'</span>; <span class="comment">//全局变量</span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">changeColor()局部执行环境中有一个变量anotherColor和函数swapColor()，</div><div class="line">但该执行环境可以访问全局执行环境中的变量color，因为全局执行环境是该环境的父执行环境</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeColor</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> anotherColor = <span class="string">'red'</span>;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">    swapColor()局部执行环境中只有一个变量tempColor，</div><div class="line">    但该执行环境可以访问全局执行环境中的变量color和changeColor()局部执行环境中的变量anotherColor，</div><div class="line">    因为全局执行环境是changeColor()局部执行环境的父执行环境，</div><div class="line">    而changeColor()局部执行环境又是swapColor()局部执行环境的父执行环境</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">swapColor</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> tempColor = anotherColor;</div><div class="line">        anotherColor = color;</div><div class="line">        color = tempColor;</div><div class="line">    &#125;</div><div class="line">    swapColor();</div><div class="line">&#125;</div><div class="line"></div><div class="line">changeColor();</div><div class="line">alert(color);</div></pre></td></tr></table></figure></p>
<p>内部环境可以通过作用域链访问所有的外部环境，但外部环境不能访问内部环境中的任何变量和函数。而且这些环境之间的联系是线性的、有序的。每个环境都可以向上搜索作用域链，以查询变量名和函数名，但任何环境都不能向下搜索作用域链而进入到另一个执行环境。以上代码中，swapColor()的作用域链中包含三个变量对象：swapColor的变量对象、changeColor()的变量对象和全局变量对象。swapColor()的局部执行环境开始会先在自己的变量对象中搜索变量和函数名，如果搜索不到会沿着作用域链逐级向上（外）搜索。</p>
<h3 id="没有块级作用域"><a href="#没有块级作用域" class="headerlink" title="没有块级作用域"></a>没有块级作用域</h3><p>在其他类C语言中由花括号封闭的代码块都会有自己的作用域（这里叫做执行环境），从而支持根据条件来定义变量。但在JavaSAcript中是没有块级作用域的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//if和for语句中的变量声明会将变量添加到当前执行环境（全局执行环境）	</span></div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="string">'hi'</span>;</div><div class="line">&#125;</div><div class="line">alert(a);	<span class="comment">//hi</span></div><div class="line">alert(<span class="built_in">window</span>.a);	<span class="comment">//hi</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">alert(i);	<span class="comment">//2</span></div><div class="line">alert(<span class="built_in">window</span>.i);	<span class="comment">//2</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;编写可维护的JavaScript代码&quot;&gt;&lt;a href=&quot;#编写可维护的JavaScript代码&quot; class=&quot;headerlink&quot; title=&quot;编写可维护的JavaScript代码&quot;&gt;&lt;/a&gt;编写可维护的JavaScript代码&lt;/h2&gt;&lt;h2 id=&quot;变量、作用域、和内存&quot;&gt;&lt;a href=&quot;#变量、作用域、和内存&quot; class=&quot;headerlink&quot; title=&quot;变量、作用域、和内存&quot;&gt;&lt;/a&gt;变量、作用域、和内存&lt;/h2&gt;&lt;p&gt;由于javaScript的变量是松散类型的，所以javaScript里的变量只是特定时间保存特定值的一个名字而已、不存在定义某个变量就必须要保存某种数据类型值的规则，变量的值及其数据类型可以在脚本的生命周期内改变。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 权威指南</title>
    <link href="http://yoursite.com/2016/09/24/HTTP%E5%8D%8F%E8%AE%AE/"/>
    <id>http://yoursite.com/2016/09/24/HTTP协议/</id>
    <published>2016-09-24T13:25:10.586Z</published>
    <updated>2016-10-28T12:12:37.031Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP概述"><a href="#HTTP概述" class="headerlink" title="HTTP概述"></a>HTTP概述</h2><h3 id="OSI、TCP-IP、HTTP"><a href="#OSI、TCP-IP、HTTP" class="headerlink" title="OSI、TCP/IP、HTTP"></a>OSI、TCP/IP、HTTP</h3><p><strong>开放系统互连参考模型 (Open System Interconnect 简称 OSI）</strong>是国际标准化组织(ISO)和国际电报电话咨询委员会(CCITT)联合制定的开放系统互连参考模型，为开放式互连信息系统提供了一种功能结构的框架。它从低到高分别是：物理层、数据链路层、<strong>网络层</strong>、<strong>传输层</strong>、会话层、表示层和<strong>应用层</strong>。</p>
<p><strong>Transmission Control Protocol/Internet Protocol</strong>的简写，中译名为<strong>传输控制协议/因特网互联协议</strong>，又名<strong>网络通讯协议</strong>，是 Internet 最基本的协议、Internet 国际互联网络的基础，由 OSI 七层模型中<strong>传输层的 TCP 协议</strong>和<strong>网络层的 IP 协议</strong>组成。TCP/IP 定义了电子设备如何连入因特网，以及数据如何在它们之间传输的标准。协议采用了4层的层级结构，每一层都呼叫它的下一层所提供的协议来完成自己的需求。通俗而言：TCP 负责发现传输的问题，一有问题就发出信号，要求重新传输，直到所有数据安全正确地传输到目的地。而IP是给因特网的每一台联网设备规定一个地址。</p>
<p><strong>超文本传输协议（HTTP，HyperText Transfer Protocol)</strong>是互联网上应用最为广泛的一种网络协议，属于 OSI 七层模型下<strong>应用层</strong>的一种协议。所有的 WWW 文件都必须遵守这个标准。设计 HTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法。1960 年美国人 Ted Nelson 构思了一种通过计算机处理文本信息的方法，并称之为超文本（hypertext）,这成为了 HTTP 超文本传输协议标准架构的发展根基。Ted Nelson 组织协调万维网协会（World Wide Web Consortium）和互联网工程工作小组（Internet Engineering Task Force ）共同合作研究，最终发布了一系列的 RFC，其中著名的 RFC 2616定义了HTTP 1.1。</p>
<p>IP 代表网际协议，TCP 使用该协议从一个网络传送数据包到另一个网络。把 IP 想像成一种高速公路，它允许其它协议在上面行驶并找到到其它电脑的出口。TCP 是高速公路上的“卡车”，它们携带的货物就是像 HTTP这样的协议。<br><a id="more"></a><br>我们在传输数据时，可以只使用（传输层）TCP/IP 协议，但是那样的话，如果没有应用层，便无法识别数据内容，如果想要使传输的数据有意义，则必须使用到应用层协议，应用层协议有很多，比如 HTTP、FTP、TELNET 等，也可以自己定义应用层协议。WEB 使用 HTTP 协议作应用层协议，以封装 HTTP 文本信息，然后使用 TCP/IP 做传输层协议将它发到网络上。”</p>
<p>下图显示了 TCP/IP、HTTP 在 OSI 七层模型下的位置<br><img src="http://i.imgur.com/EhJSq9t.png" alt=""></p>
<h3 id="Web-客户端与服务器"><a href="#Web-客户端与服务器" class="headerlink" title="Web 客户端与服务器"></a>Web 客户端与服务器</h3><p>HTTP 是利用 TCP 在<strong> Web 服务器</strong>和<strong>客户端</strong>之间传输信息的协议。客户端使用 Web 浏览器发起 HTTP <strong>请求</strong>给 Web 服务器，Web 服务器<strong>响应</strong>并发送被请求的信息给客户端。Web 内容都是存储在服务器上的。因为 Web 服务器所使用的是 HTTP 协议，所以也会被称为 HTTP 服务器。</p>
<p>最常见的客户端就是 Web 浏览器，比如 Internet Explorer、Google Chrome 及 Firefox。Web 服务器常见的有 Microsoft IIS、IBM WebSphere、BEA WebLogic、Apache、Tomcat。浏览一网站或网页时 Web 浏览器会向服务器发送一条 HTTP 请求，服务器回去寻找所期望的对象，如果成功，就将对象、对象类型、对象长度以及其他一些数据信息放在 HTTP 响应中发送给客户端</p>
<h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><p>Web 服务器是 Web 资源（Web Resource）的宿主。Web 资源是 Web 内容的源头。所有类型的内容的来源都是资源。</p>
<h3 id="媒体类型"><a href="#媒体类型" class="headerlink" title="媒体类型"></a>媒体类型</h3><p>因特网中有数千种不同的数据类型，HTTP 通过 Web 传输的对象都为其定义了名为 <strong>MIME（Multipurpose Internet Mail Extension,多用途因特网邮件扩展，最初设计为解决在不同的电子邮件系统之间搬移报文时存在的问题） 类型</strong>的<strong>数据格式标签</strong>。</p>
<p>Web 服务器会为所有 HTTP 对象数据附加一个 MIME 类型。当 Web 浏览器从服务器中取回一个对象时，会查看其相关的 MIME 类型，看看是否知道该如何处理此对象。</p>
<p>MIME 类型是一种文本标记，表示一种主要的对象类型和一个特定的子类型，中间由一条斜杠分割常见的 MIME 类型如下：</p>
<ul>
<li>text/html：表示HTML格式的文本文档</li>
<li>text/plain：表示普通的 ASCII 文本文档</li>
<li>image/jpeg：表示 JPEG 格式的图片</li>
<li>image/gif：表示 GIF 格式的图片</li>
<li>application/vnd.ms-powerpoint：表示微软的 PowerPoint 文件</li>
</ul>
<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>每个 Web 服务器资源都有一个在世界范围内唯一标识并定位信息资源的名字，这样 Web 客户端就可以知道它们想要搜索的资源是什么了。服务器资源名被称为<strong>统一资源标识符（Uniform Resource Identifier,简称 URI）</strong>。URI 有两种类型，分别为 URL 和 URN</p>
<h3 id="URL-1"><a href="#URL-1" class="headerlink" title="URL"></a>URL</h3><p>统一资源定位符（URL）是资源标识符最常见的形式。URL 描述了一台特定服务器上某资源的特定位置，可以明确说明如何从一个精确、固定的位置获取资源。<br>大部分的 URL 都遵循种标准格式，目前为止几乎所有的 URI 都是 URL</p>
<ol>
<li>方案（scheme）：表示访问资源所使用的协议类型，通常是 HTTP 协议（http://）</li>
<li>服务器的因特网地址（www.google.com）</li>
<li>其余部分表明了 Web 服务器上的某个资源（/index.jsp）</li>
</ol>
<h3 id="URN"><a href="#URN" class="headerlink" title="URN"></a>URN</h3><p>统一资源名（URN）是作为特定内容的唯一名称使用的，与目前的资源所在地无关。使用这些与位置无关的 URN 就可以将资源四处搬移。通过 URN 还可以用同一个名字通过多种网络协议来访问资源。但是 URN 仍旧处于实验阶段，没有大规模使用。</p>
<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>一个 HTTP 事务由一条（从客户端发往服务器的）请求命令和一个（从服务器发回客户端的）响应结果组成。这种通信是通过名为 HTTP 报文（HTTP message）的格式化数据块组成 </p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>HTTP 支持几种不同的请求命令，这些命令被称为 HTTP 方法（HTTP method）。每条 HTTP 报文都包含一个方法，这个方法会告诉服务器要执行什么动作（获取一个 Web 页面、运行一个网关程序、删除一个文件等）<br>常见的 HTTP 方法：</p>
<ul>
<li>GET：从服务器向客户端发送命名资源</li>
<li>PUT：将来自客户端的数据存储到一个命名的服务器资源中去</li>
<li>DELETE：从服务器中删除命名资源</li>
<li>POST：将客户端数据发送到一个服务器网关应用程序</li>
<li>HEAD：仅发送命名资源响应中的 HTTP 首部</li>
</ul>
<h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>每条 HTTP 响应报文返回时都会携带一个状态码。状态码是一个三位数字的代码，告知客户端请求是否成功，或采取其他动作。<br>常见的状态码：</p>
<ul>
<li>200：OK。文档正确返回</li>
<li>302：Redirect（重定向）。到其他地方去获取资源</li>
<li>404：Not Found（没找到）。无法找到这个资源</li>
</ul>
<p>伴随着每个数字的状态码，HTTP 还会发送一条解释性的“原因短语”文本。文本短语主要是为了进行描述，所有的处理过程都是使用的数字码</p>
<h3 id="Web-页面中可以包含多个对象"><a href="#Web-页面中可以包含多个对象" class="headerlink" title="Web 页面中可以包含多个对象"></a>Web 页面中可以包含多个对象</h3><p>应用程序完成一项任务时通常会发布对个 HTTP 事务。比如，Web 浏览器会发布一系列 HTTp 事务来获取并显示一个包含丰富图片的 Web 页面。浏览器会执行一个事务来获取描述页面布局的 HTML “框架”，然后发布另外的 HTTP 事务来获取内个嵌入式图片、图像资源、Java小程序等。这些嵌入式资源还可能位于不同的服务器上。因此，一个“Web 页面”同城并不是单个资源，而是一组资源的集合。复合 Web 页面要为每个嵌入式资源使用一个单独 的 HTTP 事务。</p>
<h3 id="报文"><a href="#报文" class="headerlink" title="报文"></a>报文</h3><p>HTTP 报文是由一行一行简单字符串组成的。HTTP 报文都是纯文本，不是二进制代码，所以可以很方便的读写。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTTP概述&quot;&gt;&lt;a href=&quot;#HTTP概述&quot; class=&quot;headerlink&quot; title=&quot;HTTP概述&quot;&gt;&lt;/a&gt;HTTP概述&lt;/h2&gt;&lt;h3 id=&quot;OSI、TCP-IP、HTTP&quot;&gt;&lt;a href=&quot;#OSI、TCP-IP、HTTP&quot; class=&quot;headerlink&quot; title=&quot;OSI、TCP/IP、HTTP&quot;&gt;&lt;/a&gt;OSI、TCP/IP、HTTP&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;开放系统互连参考模型 (Open System Interconnect 简称 OSI）&lt;/strong&gt;是国际标准化组织(ISO)和国际电报电话咨询委员会(CCITT)联合制定的开放系统互连参考模型，为开放式互连信息系统提供了一种功能结构的框架。它从低到高分别是：物理层、数据链路层、&lt;strong&gt;网络层&lt;/strong&gt;、&lt;strong&gt;传输层&lt;/strong&gt;、会话层、表示层和&lt;strong&gt;应用层&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Transmission Control Protocol/Internet Protocol&lt;/strong&gt;的简写，中译名为&lt;strong&gt;传输控制协议/因特网互联协议&lt;/strong&gt;，又名&lt;strong&gt;网络通讯协议&lt;/strong&gt;，是 Internet 最基本的协议、Internet 国际互联网络的基础，由 OSI 七层模型中&lt;strong&gt;传输层的 TCP 协议&lt;/strong&gt;和&lt;strong&gt;网络层的 IP 协议&lt;/strong&gt;组成。TCP/IP 定义了电子设备如何连入因特网，以及数据如何在它们之间传输的标准。协议采用了4层的层级结构，每一层都呼叫它的下一层所提供的协议来完成自己的需求。通俗而言：TCP 负责发现传输的问题，一有问题就发出信号，要求重新传输，直到所有数据安全正确地传输到目的地。而IP是给因特网的每一台联网设备规定一个地址。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;超文本传输协议（HTTP，HyperText Transfer Protocol)&lt;/strong&gt;是互联网上应用最为广泛的一种网络协议，属于 OSI 七层模型下&lt;strong&gt;应用层&lt;/strong&gt;的一种协议。所有的 WWW 文件都必须遵守这个标准。设计 HTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法。1960 年美国人 Ted Nelson 构思了一种通过计算机处理文本信息的方法，并称之为超文本（hypertext）,这成为了 HTTP 超文本传输协议标准架构的发展根基。Ted Nelson 组织协调万维网协会（World Wide Web Consortium）和互联网工程工作小组（Internet Engineering Task Force ）共同合作研究，最终发布了一系列的 RFC，其中著名的 RFC 2616定义了HTTP 1.1。&lt;/p&gt;
&lt;p&gt;IP 代表网际协议，TCP 使用该协议从一个网络传送数据包到另一个网络。把 IP 想像成一种高速公路，它允许其它协议在上面行驶并找到到其它电脑的出口。TCP 是高速公路上的“卡车”，它们携带的货物就是像 HTTP这样的协议。&lt;br&gt;
    
    </summary>
    
      <category term="HTTP" scheme="http://yoursite.com/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
  </entry>
  
</feed>
